:PROPERTIES:
:ID:       52DBC67F-BC0C-46D9-BF29-640A9AACBB91
:END:
#+TITLE: Yet Another Emacs Configuration
#+AUTHOR:  Yi Tang 
#+EMAIL:   yi.tang.uk@me.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes :results silent :eval never-export 
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP: align fold nodlcheck lognotestate content showeverything

[[magit:~/git/.emacs.d]]

[[https://github.com/yitang/.emacs.d]]

#+name: Update_Documentaiton
#+begin_src emacs-lisp :results silent :tangle no
(setq yt-sphinx/proj-dir "~/git/.emacs.d")
(setq yt-sphinx/docs-dir "~/git/.emacs.d/docs")
(setq yt-sphinx/proj-badge-md (list "[![Documentation Status](https://readthedocs.org/projects/emacs/badge/?version=latest)](https://readthedocs.org/projects/emacs/?badge=latest)"))
(yt-sphinx/update-documentation)
#+end_src

* Emacs Configuration
:LOGBOOK:  
CLOCK: [2015-01-25 Sun 22:25]--[2015-01-25 Sun 23:01] =>  0:36
CLOCK: [2015-01-24 Sat 21:50]--[2015-01-24 Sat 22:30] =>  0:40
CLOCK: [2015-01-23 Fri 10:15]--[2015-01-23 Fri 11:47] =>  1:32
CLOCK: [2015-01-22 Thu 20:26]--[2015-01-23 Fri 01:46] =>  5:20
:END:      
[2015-01-19 Mon 11:42]

* General                                                        :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/general
  :header-args: :tangle lisp/general.el
  :END:    

** Utilities

[2015-01-19 Mon 12:14]

Firstly, define a function for reloading Emacs configuration, need
this function in debugging this configuration file.
#+begin_src emacs-lisp
(defun yt/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
         (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

Life is too short to type "yes" or "no". 'y' or 'n' is enough.
#+begin_src emacs-lisp :results silent 
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

# Use keyfreq package to record the commands I use in Emacs.
# #+begin_src emacs-lisp :results silent 
# (require 'keyfreq)
# (keyfreq-mode 1)
# (keyfreq-autosave-mode 1)
# #+end_src

** Remove Keybind 
#+begin_src emacs-lisp :results silent 
;; (global-unset-key (kbd "C-x b"))
;; (global-unset-key (kbd "C-x C-b"))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-unset-key (kbd "C-x C-c"))  ;; save-buffers-kill-terminal
(global-unset-key (kbd "C-x o"))  ;; other window. replace by f2 - ace-window.
#+end_src
** Assorted Pieces 
[2015-01-19 Mon 12:21]

Automatically backup buffers/files into the working directory and the
/~/.emacs.d/backup// directory. 

#+begin_src emacs-lisp
;; ref: http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
;; save all backup files (foo~) to this directory.
(setq make-backup-files nil) ; stop creating ~ files
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      auto-save-timeout 20   ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
      )

;; guide-key package 
;; (require 'guide-key)
;; (setq guide-key/guide-key-sequence t) ;; on for all key-bindings 
;; (guide-key-mode 1) 

;; use company for all except few modes
(use-package company
  :ensure t)
(add-hook 'after-init-hook 'global-company-mode)
;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

;; config company mode
(setq company-selection-wrap-around t
      company-tooltip-align-annotations t
      company-idle-delay 0.36
      company-minimum-prefix-length 2
      company-tooltip-limit 10)

(setq company-ddabbrev-code-everywhere t)
(setq company-dabbrev-code-modes t)
(setq company-dabbrev-code-other-buffers 'all)
(setq company-dabbrev-ignore-buffers "\\`\\'")
(setq company-dabbrev-char-regexp "\\(\\sw\\|\\s_\\|_\\|-\\)")

;; config company for ESS mode
(defun yt/ess_company_mode_setup ()
  ;; this is really important. to source vairbales defined in the scripts.
     (make-local-variable 'company-backends)
     (add-to-list 'company-backends 'company-dabbrev-code)
     )
(add-hook 'ess-mode-hook 'yt/ess_company_mode_setup)


(defun text-mode-hook-setup ()
  (make-local-variable 'company-backends)
  (add-to-list 'company-backends 'company-ispell)
  ;; (setq company-ispell-dictionary (file-truename "~/git/.emacs.d/english_words.txt"))
  )

(add-hook 'text-mode-hook 'text-mode-hook-setup)
(use-package company-quickhelp)
(company-quickhelp-mode 1)
(define-key company-active-map (kbd "M-h") #'company-quickhelp-manual-begin)
(define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)

(setq company-dabbrev-downcase nil)
(setq company-show-numbers t)
#+end_src 

Configure recent opened files. I use =helm-mini= to navigate between
files, which is a lot convenient and faster than actually locate the
file path.

#+begin_src emacs-lisp :results silent 
(recentf-mode 0)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
#+end_src

Shows an notication for invalid operations. 
#+begin_src emacs-lisp :results silent 
(setq visible-bell nil) 
(setq ring-bell-function 'ignore)
#+end_src

Disable startup message
#+begin_src emacs-lisp :results silent 
(setq inhibit-startup-message t)        
#+end_src

yasnippet is a powerful package that I'd like to explore in the
future, and this stage, I turned if off since it will slow down the
start-up.

#+begin_src emacs-lisp :results silent
(use-package yasnippet
  :ensure t)
(yas/global-mode 1)
(add-to-list 'yas/snippet-dirs "~/git/.emacs.d/snippets" t)
(yas/reload-all)
#+end_src

** Window Layout/Navigation 
[2015-01-19 Mon 12:13]
    
I switched from using =ace-window= to using the build-in package
=movewind=. It uses S+arrow keys to switch to the window adjacent to
the current window.

It was disabled in the org-mode calendar model due to key
conflicts. This is the only conflicts I'm aware of in this config.

#+begin_src emacs-lisp :results silent
(windmove-default-keybindings)
(define-key org-read-date-minibuffer-local-map (kbd "<left>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<right>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<up>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<down>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
#+end_src

Instead of equally split the window size, it make a lot sense to have
the current window, the one I am working one, has bigger size. 
#+begin_src emacs-lisp :results silent
;; (require 'golden-ratio)
;; (golden-ratio-mode 1)
;; (add-to-list 'golden-ratio-extra-commands 'ace-window) ;; active golden ratio when using ace-window
#+end_src

Some actions will add/remove windows, and sometimes I'd like to cycle
tough the window layout/changes. In the following settings, =C-c
<left>= to undo window layout changes, and =C-c <right>= to redo.
#+begin_src emacs-lisp :results silent
(winner-mode 1)
;; winner-undo -> C-c <left>
;; winner-redo -> C-c <right>
#+end_src

I'd like to use two frames, one for doing and logging, and other for
reference/searching. 

#+begin_src emacs-lisp :results silent 
(defun yt/ref-frame ()
  (interactive)
  ;;   (frame-parameter (car (frame-list)) 'name)
  (if (eq 1 (length (frame-list)))
      (new-frame '((name . "***********************REFERENCE*******************")))
    nil))
(global-set-key (kbd "M-`") 'other-frame)
#+end_src
** System Path/Keyboard
[2015-01-19 Mon 12:15]

Solve the PATH issues for the software installed via Homebrew in OS
X. Uncomment the =setenv= for CYGWIN since I am not using Windows any
more. 
#+begin_src emacs-lisp :results silent
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell 
         (replace-regexp-in-string "[[:space:]\n]*$" "" 
                                   (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))
;; windows path convention
;; (setenv "CYGWIN" "nodosfilewarning")
#+end_src

Modify the Mac keyboard: unset the C-z just in case I run Emacs in
terminal and C-z won't stop the program without asking. 
#+begin_src emacs-lisp :result3s silent 
;; modify mac keyboard 
(cond ((eq system-type 'darwin)
       (setq mac-command-modifier 'meta)
       (fset 'insertPound "#")
       (global-set-key (kbd "M-3") 'insertPound)       
       (global-unset-key (kbd "M-`"))
       (global-set-key (kbd "M-`") 'other-frame)
       (global-set-key (kbd "C-Z") nil)
       ))

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

Open PDF files using external program.

[2016-06-20 Mon 21:43] =helm-find-files= has open with default tool
functionality. This block is no longer needed.

#+begin_src emacs-lisp :results silent 
;; (require 'openwith)
;; (openwith-mode t)
;; (if (string= system-type "darwin")
;;     (setq openwith-associations '(("\\.pdf\\'" "Skim" (file))))
;;   (setq openwith-associations '(("\\.pdf\\'" "evince" (file)))))
#+end_src

** General Editing  

There are a set of characters that are more likely to occur as a pair,
for example, quote and brackets. /smartparens mode/ allows me to
define such set of pairing characters. 
#+begin_src emacs-lisp :results silent
(use-package smartparens)
(smartparens-global-mode 1)
(sp-pair "(" ")" :wrap "C-(")
;; |foobar
;; hit C-(
;; becomes (|foobar)
(sp-pair "'" nil :actions :rem)
#+end_src

Modern display is widen. Like many of the Emacs users, I prefer to
have the text wrapper inside a small region rather than have a stretch
across the whole screen. It's easier to read in this way. 

A well accepted rule is to set the width of lines to 80 characters,
and force a logical line breaks. This funcitonality is called
=auto-fill= in Emacs, and I can do the filling by call
=fill-paragraph=.

#+begin_src emacs-lisp :results silent 
(add-hook 'text-mode-hook 'turn-on-auto-fill) ;; 
#+end_src

Just in case I need to reverse the auto-fill process.

[2016-06-20 Mon 21:47] Can't remember when was the last time I use
unfill. This snippet is not long used.
#+begin_src emacs-lisp :results silent 
(defun yt/unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))
(defun yt/unfill-region ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-region (region-beginning) (region-end) nil)))
#+end_src
** Minibuffer history 
Let Emacs remember what I've typed, so I don't need to tediously type
the whole thing. Most of the time, I could just select using =helm=.

#+begin_src emacs-lisp :results silent 
(setq savehist-file "~/git/.emacs.d/local/emacs-history")
(savehist-mode 1)
#+end_src
** highlight TODO, IMP in text mode
    [2019-10-13 Sun 04:46]

   
    #+begin_src emacs-lisp :results silent :tangle no
 ;; ;; highlights FIXME: TODO: and BUG: in prog-mode 
 ;; (add-hook 'text-mode-hook
 ;;           (lambda ()
 ;;             (font-lock-add-keywords nil
 ;;                                     '(("\\<\\(YT\\|TODO\\|IMP\\):" 1 font-lock-warning-face t)))))

    #+end_src
** move line/region up/down
    [2019-11-09 Sat 11:52]

 #+begin_src emacs-lisp :results silent 
 (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
             (exchange-point-and-mark))
      (let ((column (current-column))
               (text (delete-and-extract-region (point) (mark))))
	(forward-line arg)
	(move-to-column column t)
	(set-mark (point))
	(insert text)
	(exchange-point-and-mark)
	(setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
	(forward-line)
	(when (or (< arg 0) (not (eobp)))
             (transpose-lines arg))
	(forward-line -1)))))

 (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
   arg lines down."
    (interactive "*p")
    (move-text-internal arg))

 (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
   arg lines up."
    (interactive "*p")
    (move-text-internal (- arg)))

 (global-set-key [\M-\S-up] 'move-text-up)
 (global-set-key [\M-\S-down] 'move-text-down)
 #+end_src

* GUI - Emacs Looks Cool                                         :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/ui__emacs_looks_cool
  :header-args: :tangle lisp/editor_GUI.el
  :END:
[2015-01-19 Mon 12:16]
** Fonts 
[2015-07-20 Mon 11:46]

I use the Adobe's /Source Code Pro/ font, it is Monospaced font and
claimed to be suitable for coding environments but I use it for all
modes.

#+begin_src emacs-lisp :results silent
(add-to-list 'default-frame-alist '(font . "Source Code Pro-16"))
#+end_src
** Minimalists GUI 
[2015-07-20 Mon 11:46]

I never click any buttons in the tool-bar, nor need the scroll-bar to
tell me the cursor position the in the buffer, so I removed all of
them to have minimalist GUI of Emacs. 

Recently I found menu-bar is really useful, it shows commonly used
functions for a particular mode. Occasionally I found something
useful.

#+begin_src emacs-lisp :results silent 
(tool-bar-mode -1)
(menu-bar-mode 1)
(scroll-bar-mode -1)
#+end_src
** Theme 
[2015-07-20 Mon 11:46]

I have been using /zenburn/ theme for a while. It is a popular low
contrast colour theme and easy on the eye. Occasionally I apply
/tsdh-dark/ theme on the top when I really need to focus on.

/leuven/ theme is highly customised for org-mode and I like to use it
when my eyes are tired of the /zenburn/ theme.
#+begin_src emacs-lisp :eval yes
;; (load-theme 'zenburn t) 
;; (load-theme 'leuven t)
#+end_src
** Mode Line
[2015-07-20 Mon 11:46]

The mode line is at the bottom of every Emacs Window aside from
MiniBuffer windows. It has most of the relevant information about the
buffer, including Git status, Major mode, clock info, etc.

The smart-mode-line packages can make mode-line "smart and sexy".
There are many options to tweak.

#+begin_src emacs-lisp :results silent
(setq sml/no-confirm-load-theme t)
(use-package smart-mode-line
  :ensure t)
(setq powerline-arrow-shape 'curve)
(setq powerline-default-separator-dir '(right . left))
(setq sml/theme 'respectful)
(sml/setup)
#+end_src

There are too much information cluttered at the bottom. I disable the
display of minor modes, there are just too many and almost all are
irrelevant.

#+begin_src emacs-lisp :results silent 
(rich-minority-mode 1)
(setf rm-blacklist "")
#+end_src

This will leave empty spaces which can be removed by 

#+begin_src emacs-lisp :results silent 
(setq sml/mode-width 'full)
(setq sml/name-width 40)
#+end_src

Finally, show the current time in the mode-line. 
#+begin_src emacs-lisp :results silent
(display-time-mode)
#+end_src

** running Emacs in terminal 
   [2019-04-01 Mon 21:43]

   later i found that Emacs runs much faster in Terminal. for the
   reason i don't know but I really enjoy the lightning speed. here's
   a selection of confugratino for working Emacs in terminal.

   #+begin_src emacs-lisp :results silent 
   (add-hook 'suspend-hook
	     (lambda () (or (y-or-n-p "Really suspend? ")
			    (error "Suspend canceled"))))
   (add-hook 'suspend-resume-hook (lambda () (message "Resumed!")
				    (sit-for 2)))
   #+end_src

   then =fg= to bring back emacs. 

* Completion and Selection                                       :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/completion_and_selection
  :header-args: :tangle lisp/editor-auto-completion.el
  :END:
[2015-01-23 Fri 18:44]
** Helm - Fuzzy Match  
[2015-02-22 Sun 11:40]

Helm and fuzzy match makes selection a lot easier.  in 
#+begin_src emacs-lisp :results silent
(use-package helm)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
;; (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;;(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-l") 'helm-mini) 
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-h a") 'helm-apropos)
(setq helm-apropos-fuzzy-match t)
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

(helm-autoresize-mode t)
(defun pl/helm-alive-p ()
  (if (boundp 'helm-alive-p)
      (symbol-value 'helm-alive-p)))
;; (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)
(helm-mode 1)

;; TODO: remove this. use C-c i from Helm isntead.
;; (defun yt/helm-copy-unmarked-to-buffer ()
;;   (interactive)
;;   (with-helm-buffer
;;     (helm-mark-all)
;;     (cl-loop for cand in (helm-marked-candidates)
;;              do (with-helm-current-buffer
;;                   (insert cand "\n")))))
;; ;; by default, Cc Ci copy marked to buffer.
;; (define-key helm-map (kbd "C-c C-i") 'helm-copy-unmmarked-to-buffer)

(setq helm-ff-guess-ffap-urls nil)
#+end_src

** Multi-Cursor & Helm-swoop  - Multiple Selection 
[2015-01-19 Mon 12:10]
    
When refactoring code, I need to rename a variable or function names,
the normal way to do that is via searching and replacing.
=multiple-cursors= provides function to select all the words/symbols
that is highlighted and then modify all of them at the same time. 


#+begin_src emacs-lisp
(use-package multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)

;; (global-set-key (kbd "C-S-<right>") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-S-<left>") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

I usually use =multi-cursor= with =helm-swoop=, which allows me to search, and then narrow down all
the occurrences in a temporary buffer, and then start to edit. 

#+begin_src emacs-lisp :results silent 
(use-package helm-swoop)
;; Change the keybinds to whatever you like :)
;; (global-set-key (kbd "M-i") 'helm-swoop)
;; (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
;; (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
;; (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
(global-set-key (kbd "<C-f1>") 'helm-swoop)
;; When doing isearch, hand the word over to helm-swoop
;; (define-key isearchp-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;; From helm-swoop to helm-multi-swoop-all
;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
;; When doing evil-search, hand the word over to helm-swoop
;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)
;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)
;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)
;; Split direcion. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)
;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)
;; ----------------------------------------------------------------------

    #+end_src
    
** ace-jump 

Instead of moving into the place I want, ace-jump provides a way to
jump directly to there places, just by pressing 4-5 keys. The places
can be a character, line, or word. Personally I found it is really
efficient to jump to a word when editing. 

#+begin_src emacs-lisp 
(global-set-key (kbd "C-c w") 'ace-jump-word-mode)
#+end_src

** Expand-Region - Incremental Selection
[2015-01-20 Tue 07:47]
    
[[https://github.com/magnars/expand-region.el][expand-region]] provides smart way of sectioning, by expanding the scope
one at a time. for example, 
#+begin_example
S = "A B C"
#+end_example
If the cursor in inside of the quote, I press ~C-=~, everything inside
of the quote is selected, press it again, the quotes are also
selected, press it again, the whole line/region is selected. It saves
a lot of keystrokes in highlighting the area. 

It works well with /smartparens/ mode, if I want to apply markup
syntax around a word, I press ~C-=~ to select it, then insert quote or
forward slash, the whole word will be warped inside of quote or
forward flash. 

#+begin_src emacs-lisp
(use-package expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src
* File Management                                                :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/file_management
  :header-args: :tangle lisp/file_management.el
  :END:
[2015-01-23 Fri 18:52]

** Alternative to shell 
[2015-01-28 Wed 07:46]

For the file management tasks like rename and delete, I'd like to
wrapper it as a Lisp function and call it directly in Emacs. 

Rename the buffer-visiting file, and also rename the buffer. Similar
to the /save as/ idea but will remove the older file. 

#+begin_src emacs-lisp 
;; rename current buffer-visiting file
(defun yt/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

#+end_src

Another useful Lisp function is to copy the file path to clipboard for
cross reference. 

#+begin_src emacs-lisp :results silent 
;; full path of current buffer
(defun yt/copy-full-path-to-kill-ring ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    (let* ((file-truename buffer-file-name))
      ;;(rel-name (file-relative-name file-truename "~/")))  ; BUG: if filename is not relative to home directory.
      ;; (kill-new (concat "~/" rel-name)))))
      (kill-new file-truename))))
#+end_src

Open a file as a root user in Emacs, very handy. 

#+begin_src emacs-lisp :results silent 
(defun yt/sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name))) 
#+end_src

Find out the last modified date for current buffer, I need this often
when updating a blog post or documents. 

#+begin_src emacs-lisp :results silent 
(defun yt/last-updated-date ()
  "return modification time of current file-visitng buffer"
  (interactive)
  (let* ((mtime (visited-file-modtime))) 
    (unless (integerp mtime)
      (concat "/Last UPdated/: "
              (format-time-string "%d %b %Y" mtime)))))
#+end_src

Remove current buffer-visiting file, and kill the buffer. I use this
function often in testing and trying out. 

#+begin_src emacs-lisp :results silent 
(defun yt/delete-this-buffer-and-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))
#+end_src

It is a good practise to group all the file management related
commands together using hydra. 

#+begin_src emacs-lisp :results silent 
(defhydra hydra-file-management (:color red
                                        :hint nil)
  "
_o_pen file
_O_pen file as Sudo user 
copy file _P_ath to kill ring
_r_ename buffer-visiting file 
_d_elete buffer-visiting file
open with _e_xternal application
_g_it sync"
  ("o" find-file)
  ("O" yt/sudo-find-file)
  ("P" yt/copy-full-path-to-kill-ring)
  ("r" yt/rename-current-buffer-file)
  ("c" yt/copy-file-to)
  ("d" yt/delete-this-buffer-and-file)
  ("e" prelude-open-with)
  ("g" yt/git-up))
(global-set-key [f3] 'hydra-file-management/body)
#+end_src

Open the file manager at the default directory.

#+begin_src emacs-lisp :results silent 
;; http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
(defun yt/open-file-manager ()
  "Show current file in desktop (OS's file manager)."
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. ⁖ with nautilus
    )))

;; sort files in dired mode by datetime
(setq dired-listing-switches "-lsh")
(setq dired-recursive-copies 'always)
(setq dired-dwim-target t)
#+end_src
** Projectile - Directory Access 
[2015-01-19 Mon 12:08]

/Projectile/ is an powerful Emacs package but I only use /projectile/
to jump between different git folders, so there isn't much
configuration except using =helm= for selection.

#+begin_src emacs-lisp :results silent
(use-package projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(use-package helm-projectile)
(helm-projectile-on)
(projectile-global-mode)
(setq projectile-enable-caching t)
(setq projectile-switch-project-action 'projectile-dired)
(setq projectile-remember-window-configs t )
(setq projectile-completion-system 'helm)
(setq projectile-switch-project-action 'helm-projectile)
;; below seems wrong. it ignores .projectile file
;; (setq projectile-project-root-files-bottom-up '(".git" ".projectile")) ;; .projectile comes first
#+end_src

There are many things work out of box. For example, use =C-p p= to
choose which project to jump to, but I can type =M-g= to invoke Magit
or =M-e= to invoke Eshell for that project. 

** Remote (SSH)
[2015-01-22 Thu 23:11]

I can work on the remote files in Emacs via ssh or tramp, both are
build-in packages.

#+begin_src emacs-lisp :results silent 
(use-package tramp)
(use-package ssh)
#+end_src

I'd like catch the password so that I don't need to type it every time
to open a file. 

#+begin_src emacs-lisp :results silent 
(setq password-cache-expiry nil)
#+end_src

I mainly run R on a remote machine. Sometimes I want to copy the
charts I created to local to include them in my report. This workfow
is suspended because it fails when the file size is large. 

#+begin_src emacs-lisp
;; (defun yt/sync-local-remote ()
;;   (interactive)
;;   "copy all files in remote:~/LR_share to local:~/LR_share,
;; does not support the ther way"
;;   (find-file "/ssh:remote_host:/remote_directory")
;;   ;; (mark-whole-buffer)
;;   (dired-mark-subdir-files)
;;   ;; (find-file "~/LR_share")
;;   ;; (setq-local dirqed-dwim-target t)
;;   (dired-do-copy))
#+end_src

** Testing Buffers
[2015-07-20 Mon 11:39]

/scratch/ buffer is usually used for testing Emacs lisp functions. I
also need temporary buffers for testing R code and org-mode. In the
following settings, I can use =F9-f= to select temporal buffers.


#+begin_src emacs-lisp :results silent 
(defvar yt/temp-dir "~/.tmp"
  "temporay folders")

(defun yt/open-tmp-R ()
  (interactive)
  (find-file (expand-file-name "tmp.R" yt/temp-dir)))
(defun yt/open-tmp-el ()
  (interactive)
  (find-file (expand-file-name "tmp.el" yt/temp-dir)))
(defun yt/open-tmp-org ()
  (interactive)
  (find-file (expand-file-name "tmp.org" yt/temp-dir)))
(global-set-key (kbd "<f9> f r") 'yt/open-tmp-R)
(global-set-key (kbd "<f9> f e") 'yt/open-tmp-el)
(global-set-key (kbd "<f9> f o") 'yt/open-tmp-org)

#+end_src

* COMMENT ESS - Emacs Speaks Statistics                                  :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/ess__emacs_speaks_statistics
  :header-args: :tangle lisp/Dev-R.el
  :END:
:LOGBOOK:  
CLOCK: [2015-06-03 Wed 21:21]--[2015-06-03 Wed 21:27] =>  0:06
CLOCK: [2015-01-28 Wed 06:09]--[2015-01-28 Wed 07:55] =>  1:46
:END:      

As Statistician, coding in R and writing report is what I do most of
the day. I have been though a long way of searching the perfect editor
for me, tried Rstudio, SublimeText, TextMate and settled down happily
with ESS/Emacs, for both coding and writing.
   
There three features that have me made the decision:
   
1) Auto Formatting 
   
   Scientists has reputation of being bad programmers, who wrote the
   code that is unreadable and therefore incomprehensible to others. I
   have intention to become top level programmer and followed a style
   guide strictly. It means I have to spent sometime in adding and
   removing space in the code.
   
   To my surprise, Emacs will do it for me automatically, just by
   hitting the TAB and it also indent smartly, which make me
   conformable to write long function call and split it into multiple
   lines. Here's an example. Also if I miss placed a ')' or ']' the
   formatting will become strange and it reminders me to check.
   
   #+begin_src R :eval no :tangle no
   rainfall.subset <- data.table(rainfall.london,
                                rainfall.pairs,
                                rainfall.dublin)
   #+end_src
   
2) Search Command History
   
   I frequently search the command history. Imaging I was produce a
   plot and I realised there was something miss in the data, so I go
   back and fix the data first, then run the ggplot command again, I
   press Up/Down bottom many times, or just search once/two times.
   =M-x ggplot(= will gives me the most recent command I typed
   containing the keyword /ggplot(/, then I press =RET= to select the
   command, which might be =ggplot(gg.df, aes(lon, lat, col = city)) +
   geom_line() + .....=. If it is not I want, I press =C-r= again to
   choose the second most recent one and repeat until I find right
   one.
   
3) Literate Programming 
   
   I am an supporter of literate statistical analysis and believe we
   should put code, results and discoveries together in developing
   models. Rstudio provides an easy to use tool for this purpose, but
   it does not support different R sessions, so if I need to generate
   a report, I have to re-run all the code from beginning, which isn't
   particle for me with volumes data because it will take quit long.
   
   ESS and org-mode works really well via Babel, which is more
   friendly to use. I can choose to run only part of the code and have
   the output being inserted automatically, no need to copy/paste.
   Also, I can choose where to execute the code, on my local machine
   or the remote server, or both at the same time.
   
   These are only the surface of ESS and there are lot more useful
   features like spell checking for comments and documentation templates,
   that makes me productive and I would recommend anyone use R to learn
   ESS/Emacs. The following is my current setting.
#+begin_src emacs-lisp :results silent
;; Adapted with one minor change from Felipe Salazar at
;; http://www.emacswiki.org/emacs/EmacsSpeaksStatistics
(use-package ess)
(setq ess-ask-for-ess-directory nil) ;; start R on default folder
(setq ess-local-process-name "R")
(setq ansi-color-for-comint-mode 'filter) ;;
;; (setq comint-scroll-to-bottom-on-input t)
;; (setq comint-scroll-to-bottom-on-output nil)
;; (setq comint-move-point-for-output nil)
(setq ess-eval-visibly-p 'nowait) ;; no waiting while ess evalating
(defun my-ess-start-R ()
  (interactive)
  (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
      (progn
        (delete-other-windows)
        (setq w1 (selected-window))
        (setq w1name (buffer-name))
        (setq w2 (split-window w1))
        (R)
        (set-window-buffer w2 "*R*")
        (set-window-buffer w1 w1name))))
(defun my-ess-eval ()
  (interactive)
  (my-ess-start-R)
  (if (and transient-mark-mode mark-active)
      (call-interactively 'ess-eval-region)
    (call-interactively 'ess-eval-line-and-step)))
(add-hook 'ess-mode-hook
          '(lambda()
             (local-set-key [(shift return)] 'my-ess-eval)))
(add-hook 'ess-mode-hook
          (lambda ()
            (flyspell-prog-mode)
            (run-hooks 'prog-mode-hook)
            ))
(add-hook 'ess-R-post-run-hook (lambda () (smartparens-mode 1)))

;; REF: http://stackoverflow.com/questions/2901198/useful-keyboard-shortcuts-and-tips-for-ess-r
;; Control and up/down arrow keys to search history with matching what you've already typed:
(define-key comint-mode-map [C-up] 'comint-previous-matching-input-from-input)
(define-key comint-mode-map [C-down] 'comint-next-matching-input-from-input)
(setq ess-history-file "~/.Rhisotry")
(setq ess-indent-with-fancy-comments nil)


(define-key ess-r-mode-map "_" #'ess-insert-assign)
(define-key inferior-ess-r-mode-map "_" #'ess-insert-assign)
#+end_src

** Syntax highlight 

In Emacs, syntax highlighting is known as font-locking.  You can customize the amount of syntax highlighting that you want to see.  At the top of the Emacs window, click on the ESS menu and select "Font Lock".  This will display a menu of buttons corresponding to language elements that you can syntax highlight.  

#+begin_src emacs-lisp :results silent 
(setq ess-R-font-lock-keywords
    '((ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers)
     (ess-fl-keyword:operators)
     (ess-fl-keyword:delimiters)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op%)))
#+end_src
use pretty mode 

#+begin_src emacs-lisp :results silent 
;; (add-hook 'ess-mode-hook 'turn-on-pretty-mode)
#+end_src
** Programming Mode 
After 2014, Emacs comes a prog-mode, for programming langauge.  it is generic mode, just like text-mode, that sits underneth all the programming language, either R, phython, C++ etc.  The good thinkg to have this concept is that we can define few things that will apply to all these mode, when we write scripts.  
    
One thing I find particular usefull and necessary is to highlight
characters in comments that has particullar meaning, like TODO, FIXME
or other.  which can be particular handy in code reivew, I can
navigate and jump between the code quickly.
    
#+begin_src emacs-lisp :results silent
;; highlights FIXME: TODO: and BUG: in prog-mode 
(add-hook 'prog-mode-hook
          (lambda ()
            (font-lock-add-keywords nil
                                    '(("\\<\\(YT\\|FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

    #+end_src 
    
we usually have long scripts, and in Subimetext, one cold folder and
unfolder a function. in Emacs, this feature could be extended to
furture, by define folder-characters. at this statge, I tented to used
the deafault, I.e. folder functions only. in the folliwng setting, I
could press =F3= to folder/unfolder a function, =C-F3= or =S-F3= to
folder/unfolder all functions.
    
One potentially solution is to use =outshine= package, to show/hide
the whole section.
    
#+begin_src emacs-lisp :results silent
;; (add-hook 'prog-mode-hook 'hs-minor-mode)
;; (defalias 'fold-toggle 'hs-toggle-hiding)
;; (global-set-key (kbd "<f4>") 'hs-toggle-hiding)
;; (global-set-key (kbd "S-<f4>") 'hs-show-all) ;; S->show 
;; (global-set-key (kbd "C-<f4>") 'hs-hide-all) 
;; ;;   hs-hide-block                      C-c @ C-h
;; ;;   hs-show-block                      C-c @ C-s
;; ;;   hs-hide-all                        C-c @ C-M-h
;; ;;   hs-show-all                        C-c @ C-M-s
;; ;;   hs-hide-level                      C-c @ C-l
;; ;;   hs-toggle-hiding 
;; ;;   hs-mouse-toggle-hiding             [(shift mouse-2)]
;; ;;   hs-hide-initial-comment-block
(global-set-key (kbd "C-d") 'comment-region) ;; overwite delete-char 
(global-set-key (kbd "C-S-d") 'uncomment-region)

(defhydra hydra-fold (:pre (hs-minor-mode 1))
  "fold"
  ("t" hs-toggle-hiding "toggle")
  ("s" hs-show-all "hide-all")
  ("h" hs-hide-all "show-all")
  ("q" nil "quit"))
(global-set-key (kbd "<f4>") 'hydra-fold/body)
    #+end_src
    

use subword-mode then ThisPhase has two word, and I can use =C-DEL= it will remove the Phase and left This. Very useful in CamerCase.
#+begin_src emacs-lisp :results silent 
(subword-mode 1)
#+end_src


highlights the text that are longer than 80 columns rule. 

#+begin_src emacs-lisp :results silent 
(use-package whitespace)
(setq whitespace-line-column 120) ;; limit line length
(setq whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src


Rainbow-delimiters. constantly have problem with package, and tired of fixing it, so I turned it off at this stage. 

#+begin_src emacs-lisp :results silent
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(show-paren-mode t) ;for Emacs
#+end_src

use f8 to remove the R process buffer.

#+begin_src emacs-lisp :results silent 
(defun yt/prog-previous-output-region ()
  "return start/end points of previous output region"
  (save-excursion
    (beginning-of-line)
    (setq sp (point))
    (comint-previous-prompt 1)
    (next-line)
    (beginning-of-line)
    (setq ep (point))
    (cons sp ep)))
(defun yt/prog-kill-output-backwards ()
  (interactive)
  (save-excursion
    (let ((reg (yt/prog-previous-output-region)))
      (delete-region (car reg) (cdr reg))
      (goto-char (cdr reg))
      (insert "*** output flushed ***\n"))))
;; (global-set-key (kbd "<f8>") 'yt/prog-kill-output-backwards)
#+end_src
** Documentation  
   [2015-01-23 Fri 17:53]
   #+begin_src emacs-lisp :results silent
   ;; edit roxy template
   ;; ess-roxy-update-entry
   (setq ess-roxy-template-alist '(("description" . " content for description")
                                   ("details" . "content for details")
                                   ("title" . "")
                                   ("param" . "")
                                   ("return" . "")
                                   ("export" . "")
                                   ("author" . "Yi Tang")))
   #+end_src
    
    
** R Style Check - Flycheck 
[2015-01-20 Tue 10:49]
    
https://github.com/jimhester/lintr
the default R-style is not meet my with current R project style, has to turn it off.     
#+begin_src emacs-lisp
(use-package flycheck)
;; '(flycheck-lintr-caching nil) ;; need to customised it inside of Emacs
;; (add-hook 'ess-mode-hook
;;           (lambda () (flycheck-mode t)))
#+end_src
** Scripts editing
[2015-06-25 Thu 10:02]

** R programming 
[2015-05-26 Tue 12:41]

clean up the messy R scripts buffer. it will 
1. remove comments lines start with '## '
2. remove blank lines,
3. add one blank lines between sections, which defined by '#### '.

#+begin_src emacs-lisp :results silent 
(defun yt/clean-R () 
  (interactive)
  (when (string= major-mode "ess-mode")
    (progn
      (goto-char (point-min))
      (flush-lines "^\\(\\|[[:space:]]+\\)[#]\\{1,3\\} ") ;; remove lines with only commenst and start with #, ##, or ###, but not #### for it's the section heading. 
      (flush-lines "^\\(\\|[[:space:]]+\\)$") ;; blank lines
      (replace-regexp "#### " "\n#### ") ;; add blank lines between sections. 
      (while (search-forward-regexp "##[^']" nil t) ;; remove inline comments start with ## 
        (kill-region (- (point) 3) (line-end-position)))
    (save-buffer))))
#+end_src
apply the clean scripts to the tangled file.  also, preappend the date and my name on the tangled file. 

#+begin_src emacs-lisp :results silent 
;; add author info
(defun yt/ess-author-date ()
  (interactive)
  (when (string= major-mode "ess-mode")
    (goto-char (point-min))
    (insert "##' @author: Yi Tang\n")
    (insert "##' @date: ")
    (insert (format-time-string "%F %T"))
    (insert "\n\n")
    (save-buffer)))
(add-hook 'org-babel-post-tangle-hook 'yt/ess-author-date)
(add-hook 'org-babel-post-tangle-hook 'yt/clean-R)
#+end_src

*increase readability*
#+begin_src emacs-lisp :results silent 
(defun yt/ess-chunk-args--line ()
  "sim.gc.table <- data.table(duration = sort(sim.duration, decreasing = TRUE), rp = 1e4 / seq(1, length(sim.duration))) becomes 


sim.gc.table <- data.table(duration = sort(sim.duration,
                                          decreasing = TRUE),
                          rp = 1e4 / seq(1, length(sim.duration)))
"
  (interactive)
  (save-excursion
    (let ((start-point (point)))
      (while (re-search-forward ", \\([a-z]+ =\\)" (line-end-position) t)
	(replace-match (concat ",\n    " (match-string 1))))
      (indent-region start-point (line-end-position))
      (goto-char start-point))))
      
(defun yt/ess-chunk-plus--line ()
  "ggplot(obs.gc.table, aes(rp, duration)) + geom_point() + scale_x_log10() + scale_y_log10() 

becomes 

ggplot(obs.gc.table, aes(rp, duration)) +
    geom_point() +
    scale_x_log10() +
    scale_y_log10()
"
  (interactive)
  (save-excursion
    (let ((start-point (point)))
      (replace-regexp " \\+ " " +\n    " nil (point) (line-end-position))
      (indent-region start-point (line-end-position))
      (goto-char start-point))))
#+end_src

*testing*
#+begin_src emacs-lisp :results silent 
(defun yt/ess-script-variables ()
  (interactive)
  (let ((var-list '())
        (data-list '()))
    (save-excursion
      (while (search-forward-regexp "^[[:space:]]*\\([[:alpha:]]+\\) <- function\(" nil t)
        (add-to-list 'func-list (match-string-no-properties 1))))
    (save-excursion
      (while (search-forward-regexp "^[[:space:]]*\\([a-z\\.]+\\) <- " nil t)
        (add-to-list 'var-list (match-string-no-properties 1))))
    (append (set-difference var-list func-list) data-list)))

(defun yt/ess-remove-variables-not-in-scripts ()
  (interactive)
  (let* ((all-vars (yt/ess-script-variables))
         (all-vars-R (concat "c(\"" (mapconcat 'identity all-vars "\",\"")
                             "\")")))
    (kill-new (concat "rm(list = setdiff\(setdiff\(ls\(\), lsf.str\(\)\), " all-vars-R "\)\)"))))

#+end_src

** Auto-complete 
     [2016-05-13 Fri 14:17]
     
     Define in auto-complete section.

** Run R script using subprocess
   #+begin_src emacs-lisp :results silent 
   (defun yt/bash_run_R ()
        (interactive)
        (let* ((args (concat "R --no-save --no-restore < " (file-name-nondirectory (buffer-file-name))))
               (output-buf-name (concat "*R:" (file-name-nondirectory (buffer-file-name)) "*"))
               )
          (async-shell-command args output-buf-name)
          (with-current-buffer output-buf-name
            (inferior-ess-mode))
          ))
   #+end_src

** Code navigation
   #+begin_src emacs-lisp :results silent 
   ;; (visit-tags-table "~/R_tags")
   #+end_src
* Writing in Emacs                                               :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/writing_in_emacs
  :header-args: :tangle lisp/editor-writing.el
  :END:
[2015-01-19 Mon 12:11]

** Spell and Grammar
[2015-01-23 Fri 17:43]

Spell checking and correcting are essential in writing. Emacs need
third party program do this. There are a couple of programs and I use
=aspell=. It is part of GNU and can be easily installed in OS X and
Ubuntu. The following snippet tells Emacs where =aspell= is installed
and use British dictionary. 

#+begin_src emacs-lisp :results silent 
(if (eq system-type 'darwin)
    (setq ispell-program-name "/opt/homebrew/bin/aspell")   ;; this semes not necessary
  (setq ispell-program-name "/usr/bin/aspell"))
(setq ispell-dictionary "british"
      ispell-extra-args '() ;; TeX mode "-t"
      ispell-silently-savep t)
#+end_src

I have a personal spelling dictionary, most are abbreviations and
jargon. I can tell aspell that they are not misspellings. 

#+begin_src emacs-lisp :results silent 
(setq ispell-personal-dictionary "~/git/.emacs.d/local/ispell-dict") ;; add personal dictionary 
#+end_src


#+begin_src emacs-lisp :results silent 
(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
#+end_src

=Flyspell= depends on ispell mode and enables on-the-fly spell
checking/correcting. I enable the flyspell mode for text-mode and
org-mode. 

By default, I use C-, to move the cursor to the next misspelled word,
and =flycheck= will provide a list of candidates for
auto-correlection. I press =C-.= select the first one, and press it
again to select the next one.

#+begin_src emacs-lisp :results silent
(use-package flyspell)
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(define-key flyspell-mode-map (kbd "C-.") 'helm-flyspell-correct)
#+end_src 

I need an grammar check to let me know that 

#+begin_example
Have you do ...
#+end_example

is wrong, and also tell me to change /do/ to /done/, and also why.
=langtool= can do be the job, but currently I don't understand how to
get it works, so I am not using it anymore.

#+begin_src emacs-lisp :eval no
;; check grammar 
(use-package langtool)
(setq langtool-language-tool-jar "~/java/LanguageTool-2.8/languagetool-commandline.jar")
(setq langtool-mother-tongue "en")
#+end_src 

** Abbreviation 

I have been writing in Emacs/org-mode a lot, have been really tired of
capitalise i to I, so I use abbrevitation table.

#+NAME: my-text-abbrevs
| name      | expand            | Category |
|-----------+-------------------+----------|
| i         | I                 | write    |
| amax      | annual maximum    | stat     |
| gmap      | google map        | website  |
| mailme    | yi.tang.uk@me.com | aboutme  |
| twitterme | @yi_tang_uk       | aboutme  |
| eqt       | equivalent to     | english  |
| iif       | if and only if    | maths    |
| wrt       | with respect to   | English  |
| st        | such that         | English  |
| d/n       | distribution      | Stats    |
| obs       | observation       | stats    |
| obss      | observations      | stats    |

# :var my-text-abbrevs=my-text-abbrevs
#+begin_src emacs-lisp :colnames yes :hlines no :results silent :eval no 
(defun my-text-abbrev-expand-p ()
  "Return t if the abbrev is in a text context, which is: in
   comments and strings only when in a prog-mode derived-mode or
   src block in org-mode, and anywhere else."
  (if (or (derived-mode-p 'prog-mode)
          (and (eq major-mode 'org-mode)
               (org-in-src-block-p 'inside)))
      (nth 8 (syntax-ppss))
    t))

(define-abbrev-table 'my-text-abbrev-table ()
  "Abbrev table for text-only abbrevs. Expands only in comments and strings."
  :enable-function #'my-text-abbrev-expand-p)

(dolist (table (list text-mode-abbrev-table
                     prog-mode-abbrev-table))
  (abbrev-table-put table
                    :parents (list my-text-abbrev-table)))

(defun my-text-abbrev-table-init (abbrevs-org-list)
  "Parse 'name: expansion' pairs from an org list and insert into abbrev table."
  (message "Creating text-abbrev table...")
  (dolist (abbrev abbrevs-org-list)
    (let ((name (nth 0 abbrev))
          (expansion (nth 1 abbrev)))
      ;; (print (cons name expansion))
      (define-abbrev my-text-abbrev-table name expansion nil :system t))))
;;(my-text-abbrev-table-init my-text-abbrevs)  ; BUG: only work in org-mode
#+end_src


** Style 
[2015-05-26 Tue 12:13]

English is my second language, and I am trying to avoid certain
guarding term in writing. The following snipts I get it from Sachua
will highlight the word like /shuold/ or /I think/, which reminds to
confirm with what I am not sure about, and have more confidence in
what I am saying.

#+begin_src emacs-lisp :results silent :eval yes :tangle no
(use-package artbollocks-mode)
(add-hook 'text-mode-hook 'artbollocks-mode)
(setq artbollocks-weasel-words-regex
      (concat "\\b" (regexp-opt
                     '("should"
                       "just"
                       "sort of"
                       "a lot"
                       "probably"
                       "maybe"
                       "perhaps"
                       "I think"
                       "really"
                       "nice") t) "\\b"))
#+end_src

add synosaurus

#+begin_src emacs-lisp :results silent :tangle no

;; [2015-02-12 Thu 21:14]
;; https://github.com/rootzlevel/synosaurus
;; synosaurus-lookup
;; synosaurus-choose-and-replace
;; brew install wordnet
(require 'synosaurus)
(setq synosaurus-choose-method "popup")

;; synosaurus-lookup C-c s l
;; synosaurus-choose-and-replace C-c s r	
(setq synosaurus-backend 'synosaurus-backend-wordnet)
(setq synosaurus-choose-method 'popup)
#+end_src

*Title Case*

#+begin_src emacs-lisp :results silent 
(defun xah-title-case-region-or-line (φbegin φend)
  "Title case text between nearest brackets, or current line, or text selection.
Capitalize first letter of each word, except words like {to, of, the, a, in, or, and, …}. If a word already contains cap letters such as HTTP, URL, they are left as is.

When called in a elisp program, φbegin φend are region boundaries.
URL `http://ergoemacs.org/emacs/elisp_title_case_text.html'
Version 2015-05-07"
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (let (
           ξp1
           ξp2
           (ξskipChars "^\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕"))
       (progn
         (skip-chars-backward ξskipChars (line-beginning-position))
         (setq ξp1 (point))
         (skip-chars-forward ξskipChars (line-end-position))
         (setq ξp2 (point)))
       (list ξp1 ξp2))))
  (let* (
         (ξstrPairs [
                     [" A " " a "]
                     [" And " " and "]
                     [" At " " at "]
                     [" As " " as "]
                     [" By " " by "]
                     [" Be " " be "]
                     [" Into " " into "]
                     [" In " " in "]
                     [" Is " " is "]
                     [" It " " it "]
                     [" For " " for "]
                     [" Of " " of "]
                     [" Or " " or "]
                     [" On " " on "]
                     [" Via " " via "]
                     [" The " " the "]
                     [" That " " that "]
                     [" To " " to "]
                     [" Vs " " vs "]
                     [" With " " with "]
                     [" From " " from "]
                     ["'S " "'s "]
                     ]))
    (save-excursion 
      (save-restriction
        (narrow-to-region φbegin φend)
        (upcase-initials-region (point-min) (point-max))
        (let ((case-fold-search nil))
          (mapc
           (lambda (ξx)
             (goto-char (point-min))
             (while
                 (search-forward (aref ξx 0) nil t)
               (replace-match (aref ξx 1) 'FIXEDCASE 'LITERAL)))
           ξstrPairs))))))
#+end_src

* Org mode                                                       :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/org_mode
  :header-args: :tangle lisp/org-mode.el
  :END:

I started to learn Emacs by reading Bernt Hansen's [[http://doc.norang.ca/org-mode.html][Org Mode - Organize
Your Life In Plain Text!]] .My settings based on Bernt's 

associate org-mode with file with .org, .org_archive, and .txt
extension. 
#+begin_src emacs-lisp :results silent 
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+end_src

** org-todos
[2015-07-20 Mon 14:57]

First, define the TODO keywords. 

#+begin_src emacs-lisp :results silent 
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "WIP(p)" "SOMEDAY" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING"))))
#+end_src

Then highlight the keywords using different colours. 

#+begin_src emacs-lisp :results silent 
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
	      ("NEXT" :foreground "red" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold))))
#+end_src

Define an event when a TODO status changes, for example, if changed to
HOLD, add HOLD tag and remove WAITING tag. If changed to DONE, remove
both HOLD and WAITING tags. 

#+begin_src emacs-lisp :results silent 
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src

Especially, when a task is marked as DONE, a timestamp is added to
the LOGBOOK drawer. 

#+begin_src emacs-lisp :results silent 
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)
#+end_src

Add a cross line for the headline with DONE status. Note currently it
is disabled before of the performance issues in OS X.

#+begin_src emacs-lisp :results silent :eval yes
(defun yt/modify-org-done-face ()
  (setq org-fontify-done-headline t)
  (set-face-attribute 'org-done nil :strike-through nil)
  (set-face-attribute 'org-headline-done nil
		      :strike-through t
		      :foreground "light gray"))
;; turn it off for now.
;; (add-hook 'org-mode-hook 'yt/modify-org-done-face)
;; (setq org-fontify-done-headline t)
;; (set-face-attribute 'org-done nil :strike-through t)
;; (set-face-attribute 'org-headline-done nil :strike-through t)
#+end_src

** org-capture
[2015-07-20 Mon 14:57]

Use ~C-c c~ anywhere to quickly create a org headline and save it to a
default place. 
#+begin_src emacs-lisp :results silent 
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

# The capture mode templates.



** org-refile
[2015-07-20 Mon 14:57]

Set the refile targets, they are all level 1 2 3 in current buffer and
all the files in /org-agenda-files/. 

#+begin_src emacs-lisp :results silent 
(setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 3)))
(setq org-outline-path-complete-in-steps nil)
#+end_src

but exclude DONE state tasks from refile targets

#+begin_src emacs-lisp :results silent 
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src

Provide refile targets as paths. So a level 3 headline will be
available as level1/level2/level3.
#+begin_src emacs-lisp :results silent 
(setq org-refile-use-outline-path t)
#+end_src

Use helm for matching the target path. 
#+begin_src emacs-lisp :results silent 
(setq org-completion-handler 'helm)
#+end_src

Speed up the process by using cache.

#+begin_src emacs-lisp :results silent 
(setq org-refile-use-cache t)
#+end_src

** org-clock
:LOGBOOK:
:END:
[2015-07-20 Mon 14:57]

 Save the running clock and all clock history when exiting Emacs, load it on startup
#+begin_src emacs-lisp :results silent 
(setq org-clock-persist t)
#+end_src

Resume clocking task when emacs is restarted, and if continue to count
on this task. 
#+begin_src emacs-lisp :results silent 
(org-clock-persistence-insinuate)
(setq org-clock-in-resume t)

;; Do not prompt to resume an active clock
;; (setq org-clock-persist-query-resume nil)
#+end_src

#+begin_src emacs-lisp :results silent 

;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)

;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
#+end_src

highlight the clocking info in mode line.

#+begin_src emacs-lisp :results silent 
(set-face-attribute 'org-mode-line-clock nil
		    :weight 'bold :box '(:line-width 1 :color "#FFBB00") :foreground "white" :background "#FF4040")
#+end_src

List recently clocked headline and clock in. 

#+begin_src emacs-lisp :results silent 
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; ;; http://stackoverflow.com/questions/6156286/emacs-lisp-call-function-with-prefix-argument-programmatically
#+end_src

When clock in to a TODO headline, turn the keywords into NEXT. 
#+begin_src emacs-lisp :results silent 
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
(defun bh/clock-in-to-next (kw) 
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (if (member (org-get-todo-state) (list "TODO"))
        "NEXT")))
#+end_src

punch-in into a default org-mode headline. 

#+begin_src emacs-lisp :results silent 
(defun yt/punch-in ()
  (interactive)
    (org-with-point-at (org-id-find "1b586ec1-fa8a-4bd1-a44c-faf3aa2adf51" 'marker)
    (org-clock-in)
     ))
(global-set-key (kbd "<f9> I") 'yt/punch-in)
#+end_src


remove empty clock entrys at checkout. 

TODO: how to remove clock with less than 5 min?
#+begin_src emacs-lisp :results silent 
(add-hook 'org-clock-out-hook 'org-clock-remove-empty-clock-drawer 'append)
#+end_src
** org-tags
[2015-07-20 Mon 14:57]

#+begin_src emacs-lisp :results silent 
(setq org-tag-alist (quote ((:startgroup)
                            ("@office" . ?O)
                            ("@home" . ?H)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("PERSONAL" . ?P)
                            ("WORK" . ?W)
                            ("NOTE" . ?n)
                            ("READ" .?r)
                            ("CANCELLED" . ?c)
                            )))
;; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))
(setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

** Others
[2015-07-20 Mon 14:57]
#+begin_src emacs-lisp :results silent 
;;;; * Custom Key Bindings

(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
;; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
;; global Effort estimate values
;; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:05 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
(setq org-agenda-log-mode-items (quote (closed clock)))

(setq org-use-speed-commands t)
(defun bh/insert-inactive-timestamp ()
  (interactive)
  (org-insert-time-stamp nil t t nil nil nil))
(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)

(defun yt/insert-ts-as-file ()
    (interactive)
  (insert (format-time-string "%Y-%m-%d--%H-%M-%S"))
  )

(global-set-key (kbd "<f9> T") 'yt/insert-ts-as-file)

(defun bh/insert-heading-inactive-timestamp ()
  (save-excursion
    (org-return)
    (org-cycle)
    (bh/insert-inactive-timestamp)))
;; (add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp 'append)
(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.png\\'" . emacs)
                            ("\\.svg\\'" . system)
                            ("\\.mm\\'" . system)
                            ("\\.x?html?\\'" . system)
                            ("\\.pdf\\'" . "evince %s"))))
                                        ; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)

(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

(add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))
#+end_src
** Agenda 
:PROPERTIES:
:ID:       E7C78764-3A93-4ACC-89AD-939F6A229FDB
:END:
[2015-01-23 Fri 16:54]

#+begin_src emacs-lisp :results silent
(global-set-key (kbd "<f12>") 'org-agenda)

;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-dim-blocked-tasks 'invisible)

;; Compact the block agenda view
(setq org-agenda-compact-blocks nil)




;; Limit restriction lock highlighting to the headline only
(setq org-agenda-restriction-lock-highlight-subtree nil)

;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

  ;;;; * agenda ignore items 
;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)

(setq org-agenda-include-diary nil)


(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
              (todo category-up effort-up)
              (tags category-up effort-up)
              (search category-up))))



;; (setq org-agenda-tags-column -102)
;; Use sticky agenda's so they persist
;; (setq org-agenda-sticky t)

#+end_src


Enable display of the time grid so we can see the marker for the
current time
#+begin_src emacs-lisp :results silent 
(setq org-agenda-time-grid (quote ((daily today require-timed)
 (600 630 700 730 800 830 900 930 1000 1030 1200 1400 1600 1800 2000)
 "......" "----------------")))
#+end_src

Start the weekly agenda on Monday.
#+begin_src emacs-lisp :results silent 
(setq org-agenda-span 'week)
(setq org-agenda-start-on-weekday 1)
#+end_src

use 30 days. 

#+begin_src emacs-lisp :results silent 
(setq org-deadline-warning-days 30)
#+end_src

check clock entries if some are too long/short.

#+begin_src emacs-lisp :results silent 
(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"                 ;; highligh clock entries longer than 5 hours.
			    :min-duration "00:05"  ;; highlight clock smaller than 5 mins 
			    :max-gap "00:05"       ;; highlight clock gap loger than 5 mins.
			    :gap-ok-around ("4:00")))) 
(setq org-read-date-prefer-future 'time)
#+end_src

agenda reminder
#+begin_src emacs-lisp :results silent 
;; Erase all reminders and rebuilt reminders for today from the agenda
(defun bh/org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (setq appt-display-format 'window) ;; YT: show notification in separate window
  (org-agenda-to-appt))

                                        ; Rebuild the reminders everytime the agenda is displayed
(add-hook 'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)

                                        ; This is at the end of my .emacs - so appointments are set up when Emacs starts
;; (bh/org-agenda-to-appt)
#+end_src

** customised 

#+begin_src emacs-lisp :results silent 
(setq org-reverse-note-order t) ;; refiled headline will be the first under the taget

(setq org-archive-location "::* Archived Tasks") ;;in-file archive 

(setq org-habit-show-all-today t)
(setq org-habit-show-habits nil)
(setq org-habit-graph-column 80)
;; add the following 
(setq org-time-stamp-custom-formats '("<%A %d %B %Y>" . "<%A %d %B %Y %H:%M>"))
(setq org-agenda-tags-column 120)

(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %10Mindfullness")

#+end_src

Start up options
#+begin_src emacs-lisp :results silent 
(setq org-startup-folded t
      org-hide-block-startup t
      org-startup-indented nil)
#+end_src
** Deep Configuration 

Remove keys

#+begin_src emacs-lisp :results silent 
;; remove C-TAB
(define-key org-mode-map (kbd "C-S-<right>") 'mc/mark-next-like-this)
(define-key org-mode-map (kbd "C-S-<left>") 'mc/mark-previous-like-this)
(org-defkey org-mode-map (kbd "C-c [") nil)
(org-defkey org-mode-map (kbd "C-c ]") nil)
(org-defkey org-mode-map (kbd "C-TAB") nil)
(org-defkey org-mode-map (kbd "<f8>") nil)
;; use helm iwth org
;; (setq org-completion-handler 'helm)
#+end_src

Show org-mode bullets as UTF-8 characters.


Add markup wrapper for org-mode. to turn a word into bold, wrapper in
a selected region, by using expand-region, which is bound to =C-==
then type *.
#+begin_src emacs-lisp :results silent 
(sp-local-pair 'org-mode "=" "=") ; select region, hit = then region -> =region= in org-mode
(sp-local-pair 'org-mode "*" "*") ; select region, hit * then region -> *region* in org-mode
(sp-local-pair 'org-mode "/" "/") ; select region, hit / then region -> /region/ in org-mode
(sp-local-pair 'org-mode "_" "_") ; select region, hit _ then region -> _region_ in org-mode
(sp-local-pair 'org-mode "+" "+") ; select region, hit + then region -> +region+ in org-mode
(sp-local-pair 'org-mode "$" "$") ; select region, hit $ then region -> $region$ in org-mode
#+end_src
** External Links
    
   #+begin_src emacs-lisp :results silent 
     (global-set-key (kbd "C-c l") 'org-store-link)
   #+end_src
** Babel
[2015-01-29 Thu 14:16]

#+begin_src emacs-lisp :results silent 
;;;; * org-babel 
(setq org-src-window-setup 'current-window)
(setq org-src-fontify-natively nil)
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)
(setq org-catch-invisible-edits 'error)
(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

#+begin_src emacs-lisp :results silent 
(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))


(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

(setq org-babel-results-keyword "results")
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t) ;; TODO: simplifiy this list 
	 (R . t)
	 (shell . t)
	 (org . t)
	 (dot . t)
	 (python .t)
	 ;; (ipython .t)
	 ;; (bibtex .t)
	 (octave . t)
	 (latex . t)
	 (jupyter . t)
	 (sql . t))))

(setq org-babel-default-header-args (append org-babel-default-header-args '((:colnames . "yes"))))

;; (add-to-list 'org-babel-default-header-args:R
;;              ;; '(:session . "*R-main*")
;;              '((:width . 640) (:height . 640)))

(setq org-confirm-babel-evaluate nil)
#+end_src
*** Fix org-babel-switch-to-session for bash src block
:PROPERTIES:
:ID:       1FCAD3D8-987A-47AC-AC03-A7AB48F54388
:END:
    [2021-10-04 Mon 08:03]

#+begin_src emacs-lisp :results silent
;; copy of org-sh-bash-initiate-session in ob-shell.el but with different name
;; per https://emacs.stackexchange.com/questions/55957/error-no-org-babel-initiate-session-function-for-bash
(defun org-babel-bash-initiate-session (&optional session _params)
  "Initiate a session named SESSION according to PARAMS."
  (when (and session (not (string= session "none")))
    (save-window-excursion
      (or (org-babel-comint-buffer-livep session)
          (progn
	    (shell session)
	    ;; Needed for Emacs 23 since the marker is initially
	    ;; undefined and the filter functions try to use it without
	    ;; checking.
	    (set-marker comint-last-output-start (point))
	    (get-buffer (current-buffer)))))))

#+end_src    
** Export 
[2015-02-04 Wed 12:23]

Add export back-end, I need HTML, PDF, MarkDown, and Ascii. 

#+begin_src emacs-lisp :results silent 
;; (use-package ox-html)
;; (use-package ox-latex)
;; (use-package ox-ascii)
;; (use-package ox-md)
(use-package htmlize)
#+end_src

General export options, it applys to all the export-backend. 
#+begin_src emacs-lisp
(setq org-export-with-toc nil
      org-export-with-todo-keywords t
      org-export-with-sub-superscripts nil
      org-export-with-planning nil
      org-export-with-author t
      org-export-with-timestamps nil
      org-export-babel-evaluate t
      org-export-with-drawers nil)
#+end_src

#+begin_src emacs-lisp :results silent 
(setq org-image-actual-width '(400))
#+end_src

Set the default format when exporting table to CSV. 
#+begin_src emacs-lisp :results silent 
(setq org-table-export-default-format "orgtbl-to-csv")

#+end_src

define the markups. 
#+begin_src emacs-lisp :results silent 
(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim))))
#+end_src
** PDF Export
[2015-01-19 Mon 15:45]

#+begin_src emacs-lisp
;; http://emacs-fu.blogspot.co.uk/2011/04/nice-looking-pdfs-with-org-mode-and.html
;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("yt/org-article"
               "
\\documentclass[11pt,a4paper]{article}
\\usepackage{graphicx}    %% demo mode is a must when .img does not exists.
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{hyperref}
\\hypersetup{
     colorlinks   = true,
     citecolor    = gray
}
\\usepackage{amsmath}
\\usepackage{amstext}
\\usepackage{amssymb} %% checkbox
\\usepackage{commath}
\\usepackage{physics}   %% \\pdv for derivative operators https://tex.stackexchange.com/questions/225523/how-to-write-partial-differential-equation-ex-dq-dt-ds-dt-with-real-partial-d
\\DeclareMathOperator*{\\argmin}{\\arg\\!\\min} %% use $\\argmin_{b}$
\\DeclareMathOperator*{\\argmax}{\\arg\\!\\max} 
%% \\DeclareMathOperator{\\E}{\\mathbb{E}}
\\newcommand{\\E}[1]{{\\mathbb E}\\left[ #1 \\right]}
\\newcommand{\\Var}{\\mathrm{Var}}
%% \\DeclareMathOperator{\\P}{\\mathbb{Pr}}

\\usepackage{minted}
\\defaultfontfeatures{Mapping=tex-text}
% \\setromanfont[BoldFont={Gentium Basic Bold},
%                 ItalicFont={Gentium Basic Italic}]{Gentium Plus}
\\setsansfont{Charis SIL}
\\setmonofont[Scale=0.8]{DejaVu Sans Mono}
\\usepackage{geometry}
%% \\geometry{a4paper, textwidth=6.5in, textheight=10in,
 %%  marginparsep=7pt,
 %%  marginparwidth=1.2in, %% make sure it less than right=1.5in,
  %% otherwise, will go out of the paper
 %% right=1.5in, left=0.6in}

\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
 
%% package from org-latex-default-packages-alist
\\usepackage{setspace}
\\onehalfspacing
\\usepackage{textcomp}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{ulem}
\\usepackage{amsthm}

\\theoremstyle{definition}
\\newtheorem{definition}{Definition}[section]% Conjecture is numbered
                                % within \section
\\newtheorem{lemma}[definition]{Lemma}
\\newtheorem{theorem}[definition]{Theorem}

\\newcommand{\\twodots}{\\mathinner {\\ldotp \\ldotp}}

%% \\renewcommand\\texttt[1]{{\\mint{cl}|#1|}} 


\\usepackage{environ}
\\NewEnviron{note}{\\marginpar{\\footnotesize \\BODY}}

%% algorithm 
\\usepackage{xcolor}
\\usepackage[linesnumbered]{algorithm2e}
\\newcommand\\mycommfont[1]{\\footnotesize\\ttfamily\\textcolor{blue}{#1}}
\\makeatletter
\\renewcommand{\\@algocf@capt@plain}{above}% formerly {bottom}
\\makeatother


\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-default-class "yt/org-article")

(add-to-list 'org-latex-classes
             '("yt/beamer"
               "\\documentclass[aspectratio=169]{beamer}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usetheme[faculty=fi]{fibeamer}
\\usepackage[utf8]{inputenc}

\\usepackage[
  main=english, %% By using `czech` or `slovak` as the main locale
                %% instead of `english`, you can typeset the
                %% presentation in either Czech or Slovak,
                %% respectively.
  czech, slovak %% The additional keys allow foreign texts to be
]{babel}        %% typeset as follows:


[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]
"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

;; (use-package ox-beamer)

;; code highlights using minted package 
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")))
;; ("linenos" "")))

;;;; comple pdf 
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"))
#+end_src

#+results:
| xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f | xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f | xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f |

* Blogging with Jekyll
  :PROPERTIES:
  :header-args: :tangle lisp/blogging.el
  :END:

Jeklly have few conventins, like the new, YAML etc, it is better to
solve it autoamtilcally and in Emacs, as part of the export process.


First, define a publish project, so that the exported html file will
go to certail place, and we can define the styles, and other features
for a praticularlly project. but for Jeklly, it is more about to match
the constraints.

For managing a blog, it is good idea to keep the original org file
inside of the website.  Most people using Jeklly write blog in
Markdown format, but Org-mode is obvious more powerful in Literate
Program. In this case, I have two folders under Jeklly project
direcotyr, org/_drafts and org/_posts. 

#+begin_src emacs-lisp :results silent 
(defvar jekyll-directory (expand-file-name "~/git/mywebsite/org/")
  "Path to Jekyll blog.")
(defvar jekyll-drafts-dir "_drafts/"
  "Relative path to drafts directory.")
(defvar jekyll-posts-dir "_posts/"
  "Relative path to posts directory.")
(defvar jekyll-post-ext ".org"
  "File extension of Jekyll posts.")
#+end_src

I can quickly scne the folder to see how many outstanding drasfts and
which posts is published in in cease I need to edit it. I bind it to
=C-c j p= and =C-c j d= where /j/ means Jekly, /p/ means posts, and
/d/ means drafts. 

#+begin_src emacs-lisp :results silent 
(global-set-key (kbd "C-c j p") (lambda ()
                                  (interactive)
                                  (find-file "~/git/mywebsite/org/_posts/")))
(global-set-key (kbd "C-c j d") (lambda ()
                                  (interactive)
                                  (find-file "~/git/mywebsite/org/_drafts/")))
#+end_src

Jeklyl has a spacial template that requires to add YAML in the front,
since it is in org-mode, I can call Babel functions, add table of
contents and others etc. This is the template I am using. Note the
jekly-ymal-escape function is used just to make sure there is strange
characters that jeklly don;t like. 

#+begin_src emacs-lisp :results silent 
(defvar jekyll-post-template
  " 
,#+begin_export html
---
layout: post
title: %s
# date: add publish date when ready
published: false
excerpt: 
categories:
  -  
tags:
  -
comments: true
---
,#+END_export

,#+begin_export html
<script type=\"text/javascript\"
    src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">
</script>
,#+end_export

# #+call: GetLastUpdatedDate[:exports none]()[:results org]

,#+TOC: headlines 4
"
  "Default template for Jekyll posts. %s will be replace by the post title.")

(defun jekyll-yaml-escape (s)
  "Escape a string for YAML."
  (if (or (string-match ":" s)
        2  (string-match "\"" s))
      (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\"")
    s))
#+end_src

Then in starting a blog post, I fill the title, and there file will be
served in the org/_drafts folder, and insert the YMAL. Note in jeklly,
the title be part of html file name and therefore part of the URL. So
strange characters must been removed. 

#+begin_src emacs-lisp :results silent 
(defun blog-draft-post (title) 
  "Create a new Jekyll blog post."
  (interactive "sPost Title: ")
  (let ((draft-file (concat jekyll-directory jekyll-drafts-dir
                            (jekyll-make-slug title)
                            jekyll-post-ext)))
    (if (file-exists-p draft-file)
        (find-file draft-file)
      (find-file draft-file)
      (insert (format jekyll-post-template (jekyll-yaml-escape title))))))

(defun jekyll-make-slug (s)
  "Turn a string into a slug."
  (replace-regexp-in-string
   " " "-" (downcase
            (replace-regexp-in-string
             "[^A-Za-z0-9 ]" "" s))))


#+end_src

Once I think the article is read to be publish, the
=blog-publish-post= function will move the editing draft into
org/_posts folder and prepend the file name with today's date in
%Y-%m-%d format. it is required by Jeklly.  

#+begin_src emacs-lisp :results silent 
(defun blog-publish-post ()
  "Move a draft post to the posts directory, and rename it so that it
 contains the date."
  (interactive)
  (cond
   ((not (equal
          (file-name-directory (buffer-file-name (current-buffer)))
          (concat jekyll-directory jekyll-drafts-dir)))
    (message "This is not a draft post."))
   ((buffer-modified-p)
    (message "Can't publish post; buffer has modifications."))
   (t
    (let ((filename
           (concat jekyll-directory jekyll-posts-dir
                   (format-time-string "%Y-%m-%d-")
                   (file-name-nondirectory
                    (buffer-file-name (current-buffer)))))
          (old-point (point)))
      (rename-file (buffer-file-name (current-buffer))
                   filename)
      (kill-buffer nil)
      (find-file filename)
      (set-window-point (selected-window) old-point)))))
#+end_src

I bound ~C-c j n~ and ~C-c j P~ for making a draft and publishing a draft. 

#+begin_src emacs-lisp :results silent 
(global-set-key (kbd "C-c j n") 'blog-draft-post)
(global-set-key (kbd "C-c j P") 'blog-publish-post)
#+end_src

Then convert all the org files in org/_posts into HTML and save in the
_posts/ folder. It is good to define an org-publish-project to
automate this. Note in the following, the published HTML has body
only, and without TOC, which are again, required by JEKLLY. 

#+begin_src emacs-lisp :results silent 
;; ref: http://cute-jumper.github.io/emacs/2013/10/06/orgmode-to-github-pages-with-jekyll/
(setq org-publish-project-alist
      '(("myblog"
         :base-directory "~/git/mywebsite/org"
         :base-extension "org"
         :publishing-directory "~/git/mywebsite/blog"
         :recursive t
         :publishing-function org-md-publish-to-md
         :with-toc nil
         :headline-levels 4
         :section-numbers nil
         :auto-preamble nil
         :auto-sitemap nil
         :html-extension "html"
         :htmlized-source t
         :body-only t
         )))
#+end_src

#+name: Jeklly-config-backup
#+begin_src emacs-lisp :results silent :exports none
(defvar jekyll-directory (expand-file-name "~/git/mywebsite/org/")
  "Path to Jekyll blog.")
(defvar jekyll-drafts-dir "_drafts/"
  "Relative path to drafts directory.")
(defvar jekyll-posts-dir "_posts/"
  "Relative path to posts directory.")
(defvar jekyll-post-ext ".org"
  "File extension of Jekyll posts.")

(defvar jekyll-post-template
  " 
,#+begin_export html
---
layout: post
title: %s
published: false
excerpt: 
categories:
  -  
tags:
  -
comments: true 
---
,#+END_export

# #+call: GetLastUpdatedDate[:exports none]()[:results org]

,#+TOC: headlines 4
"
    "Default template for Jekyll posts. %s will be replace by the post title.")

(defun jekyll-make-slug (s)
  "Turn a string into a slug."
  (replace-regexp-in-string
   " " "-" (downcase
            (replace-regexp-in-string
             "[^A-Za-z0-9 ]" "" s))))

(defun jekyll-yaml-escape (s)
  "Escape a string for YAML."
  (if (or (string-match ":" s)
        2  (string-match "\"" s))
      (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\"")
    s))

(defun blog-draft-post (title) 
  "Create a new Jekyll blog post."
  (interactive "sPost Title: ")
  (let ((draft-file (concat jekyll-directory jekyll-drafts-dir
                            (jekyll-make-slug title)
                            jekyll-post-ext)))
    (if (file-exists-p draft-file)
        (find-file draft-file)
      (find-file draft-file)
      (insert (format jekyll-post-template (jekyll-yaml-escape title))))))

(defun blog-publish-post ()
  "Move a draft post to the posts directory, and rename it so that it
 contains the date."
  (interactive)
  (cond
   ((not (equal
          (file-name-directory (buffer-file-name (current-buffer)))
          (concat jekyll-directory jekyll-drafts-dir)))
    (message "This is not a draft post."))
   ((buffer-modified-p)
    (message "Can't publish post; buffer has modifications."))
   (t
    (let ((filename
           (concat jekyll-directory jekyll-posts-dir
                   (format-time-string "%Y-%m-%d-")
                   (file-name-nondirectory
                    (buffer-file-name (current-buffer)))))
          (old-point (point)))
      (rename-file (buffer-file-name (current-buffer))
                   filename)
      (kill-buffer nil)
      (find-file filename)
      (set-window-point (selected-window) old-point)))))


;; Improve our blogging experience with Org-Jekyll. This code sets four
;; functions with corresponding key bindings:
;;
;; C-c j n - Create new draft
;; C-c j P - Post current draft
;; C-c j d - Show all drafts
;; C-c j p - Show all posts
;;
;; Once a draft has been posted (i.e., moved from the _drafts
;; directory to _post with the required date prefix in the filename), we
;; then need to html-export it to the jekyll rootdir (with org-publish).

(global-set-key (kbd "C-c j n") 'blog-draft-post)
(global-set-key (kbd "C-c j P") 'blog-publish-post)
(global-set-key (kbd "C-c j p") (lambda ()
                                  (interactive)
                                  (find-file "~/git/mywebsite/org/_posts/")))
(global-set-key (kbd "C-c j d") (lambda ()
                                  (interactive)
                                  (find-file "~/git/mywebsite/org/_drafts/")))

#+end_src


** code highlight 
[2015-01-23 Fri 17:47]

wrap src block into highlight block in Jekyll. it search for src
block, and replace the header with {% highlight python %} for
example. run this as pre-export hook.

it worth exploring implementing it as a filter function to the src
code block. 

#+begin_src emacs-lisp :results silent
(defvar jekyll-highlight-template-open
  "{%% highlight %s %%}"
  "%s will be replaced by the language identifier")

(defvar jekyll-highlight-template-close
  "{% endhighlight %}")

(defun yt/org-to-jekyll-highlight ()
  "wrap babel src block with jekyll syntax highlight block.

so emacs-lisp babel block would be translated to {% highlight
emacs-lisp %} block.
"
  (interactive)
  ;; (setq case-fold-search t)
  (save-excursion
    (goto-char (point-min))
    (org-show-block-all)
    (while (search-forward-regexp "^\s*#\\+begin_src \\([a-z_-]+\\).*$" nil t)
      (replace-match (format jekyll-highlight-template-open (match-string 1)))
      (message "DEBUGGG")
      (search-forward-regexp "^\s*#\\+end_src") ;; will throew error if src block is not closed. 
      (replace-match jekyll-highlight-template-close t))))

;; (add-hook 'org-export-before-processing-hook 'yt/org-to-jekyll-highlight) ;; won't work. all src blocks are wrapped before execuating. not ideal if i do need them. 
;; (add-hook 'org-export-before-parsing-hook 'yt/org-to-jekyll-highlight)

;;;; TODO: 
;; it won't be good to add a hook yt/org-jekyl-highlight
;; so that it won't effect my other exporting

(defun yt/my-blog-pre-process-hook (backend) ;; only for html back-end
  (when (equal default-directory
               (concat jekyll-directory jekyll-posts-dir))
    ;; (when (equal backend 'html)
      (message "PROCESS SRC BLOCK")
      (goto-char (point-min))
      (yt/org-to-jekyll-highlight)))

;; (setq org-export-before-parsing-hook nil)
(add-hook 'org-export-before-parsing-hook 'yt/my-blog-pre-process-hook)

#+end_src

#+results:
** Path Issues 

When publishing, the org-file is firstly exported to html file, and
when Jekyll build the website, the html file will be saved in to some
folder that depends on the YMAL. Then the relative path to image files
are broken. To solve that, according to the Jeklyy web site, is to
save all the image or downloade files in assets/ folder.  Then those
image files are referende by org-mode.

First, define a img link, that when exporting, the image a_img.png
will be set to linked to /assets/a_img.png. when I click, it wil open
the img file in Emacs.

#+begin_src emacs-lisp :results silent 
(defun org-custom-link-img-follow (path)
  (org-open-file-with-emacs
   (format "../../assets/%s" path)))

(defun org-custom-link-img-export (path desc format)
  (cond
   ((eq format 'html)
    (format "<img src=\"/assets/%s\" alt=\"%s\"/>" path desc))))

(org-add-link-type "img" 'org-custom-link-img-follow 'org-custom-link-img-export)
#+end_src
** Org-link 
[2015-07-18 Sat 09:15]

*magit*
#+begin_src emacs-lisp :results silent 
;; from https://lists.gnu.org/archive/html/emacs-orgmode/2009-08/msg00460.html
;; magit link in org-mode 
(defun org-magit-store-link ()
  "Store a link to a directory to open with magit."
  (when (eq major-mode 'magit-mode)
    (let* ((dir default-directory)
           (link (org-make-link "magit:" dir))
           (desc (abbreviate-file-name dir)))
      (org-store-link-props :type "magit" :link link :description desc)
      link)))
(defun org-magit-open (dir)
  "Follow a magit link to DIR."
  (magit-status dir))
(org-add-link-type "magit" 'org-magit-open nil)
(add-hook 'org-store-link-functions 'org-magit-store-link)

#+end_src

** *cross reference*
[2015-07-21 Tue 10:59]

#+begin_src emacs-lisp :results silent 
(defun org-jekyll-post-link-follow (path)
  (org-open-file-with-emacs path))

(defun org-jekyll-post-link-export (path desc format)
  (cond
   ((eq format 'html)
    (format "<a href=\"{%% post_url %s %%}\">%s</a>" path desc))))

(org-add-link-type "jekyll-post" 'org-jekyll-post-link-follow 'org-jekyll-post-link-export)
#+end_src
* auctex
  :PROPERTIES:
  :header-args: :tangle lisp/latex.el
  :END:
   [2015-10-03 Sat 13:48]

http://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs

http://tex.stackexchange.com/questions/29813/setup-synctex-with-emacs

http://www.stefanom.org/setting-up-a-nice-auctex-environment-on-mac-os-x/

#+begin_src emacs-lisp :results silent 
;; AucTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
;; make latexmk available via C-c C-c
(add-hook 'LaTeX-mode-hook (lambda ()
                             (push
                              '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                                :help "Run latexmk on file")
                              TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
(setq TeX-view-program-selection '((output-pdf "evince")))
(if (string= system-type "darwin")
    (setq TeX-view-program-selection '((output-dvi "open")
                                       (output-pdf "open")
                                       (output-html "open"))))

(add-hook 'LaTeX-mode-hook #'outline-minor-mode)
(use-package company-auctex)
(company-auctex-init)

#+end_src

#+begin_src emacs-lisp :results silent 
;;; Brent.Longborough's .emacs

;; (global-visual-line-mode 1); Proper line wrapping
;; (global-hl-line-mode 1); Highlight current row
;; (show-paren-mode 1); Matches parentheses and such in every mode
;; (set-fringe-mode '(0 . 0)); Disable fringe because I use visual-line-mode
;; (set-face-background hl-line-face "#f2f1f0"); Same color as greyness in gtk
;; (setq inhibit-splash-screen t); Disable splash screen
;; (setq visible-bell t); Flashes on error
;; (setq calendar-week-start-day 1); Calender should start on Monday
;; (add-to-list 'default-frame-alist '(height . 59)); Default frame height.

;;; AUCTeX
;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
(setq TeX-parse-self t); Enable parse on load.
(setq TeX-auto-save t); Enable parse on save.
(setq-default TeX-master nil)

(setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

(add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
(setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
(setq LaTeX-csquotes-close-quote "}"
      LaTeX-csquotes-open-quote "\\enquote{")

;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
(add-hook 'TeX-mode-hook 'LaTeX-math-mode)

;;; RefTeX
;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
(add-hook 'TeX-mode-hook 'turn-on-reftex)

(eval-after-load 'reftex-vars; Is this construct really needed?
  '(progn
     (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
     ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html
     (setq reftex-plug-into-AUCTeX t)
     ;; So that RefTeX also recognizes \addbibresource. Note that you
     ;; can't use $HOME in path for \addbibresource but that "~"
     ;; works.
     (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
                                        ;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
     (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
     (setq reftex-cite-format; Get ReTeX with biblatex, see http://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992
           '((?t . "\\textcite[]{%l}")
             (?a . "\\autocite[]{%l}")
             (?c . "\\cite[]{%l}")
             (?s . "\\smartcite[]{%l}")
             (?f . "\\footcite[]{%l}")
             (?n . "\\nocite{%l}")
             (?b . "\\blockcquote[]{%l}{}")))))

;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html
(setq font-latex-match-reference-keywords
      '(
        ;; biblatex
        ("printbibliography" "[{")
        ("addbibresource" "[{")
        ;; Standard commands
        ;; ("cite" "[{")
        ("Cite" "[{")
        ("parencite" "[{")
        ("Parencite" "[{")
        ("footcite" "[{")
        ("footcitetext" "[{")
        ;; ;; Style-specific commands
        ("textcite" "[{")
        ("Textcite" "[{")
        ("smartcite" "[{")
        ("Smartcite" "[{")
        ("cite*" "[{")
        ("parencite*" "[{")
        ("supercite" "[{")
                                        ; Qualified citation lists
        ("cites" "[{")
        ("Cites" "[{")
        ("parencites" "[{")
        ("Parencites" "[{")
        ("footcites" "[{")
        ("footcitetexts" "[{")
        ("smartcites" "[{")
        ("Smartcites" "[{")
        ("textcites" "[{")
        ("Textcites" "[{")
        ("supercites" "[{")
        ;; Style-independent commands
        ("autocite" "[{")
        ("Autocite" "[{")
        ("autocite*" "[{")
        ("Autocite*" "[{")
        ("autocites" "[{")
        ("Autocites" "[{")
        ;; Text commands
        ("citeauthor" "[{")
        ("Citeauthor" "[{")
        ("citetitle" "[{")
        ("citetitle*" "[{")
        ("citeyear" "[{")
        ("citedate" "[{")
        ("citeurl" "[{")
        ;; Special commands
        ("fullcite" "[{")))

(setq font-latex-match-textual-keywords
      '(
        ;; biblatex brackets
        ("parentext" "{")
        ("brackettext" "{")
        ("hybridblockquote" "[{")
        ;; Auxiliary Commands
        ("textelp" "{")
        ("textelp*" "{")
        ("textins" "{")
        ("textins*" "{")
        ;; supcaption
        ("subcaption" "[{")))

(setq font-latex-match-variable-keywords
      '(
        ;; amsmath
        ("numberwithin" "{")
        ;; enumitem
        ("setlist" "[{")
        ("setlist*" "[{")
        ("newlist" "{")
        ("renewlist" "{")
        ("setlistdepth" "{")
        ("restartlist" "{")))
#+end_src
* Hydra                                                          :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/hydra
  :header-args: :tangle lisp/hydra.el
  :END:
[2015-06-22 Mon 14:11]

#+begin_src emacs-lisp :results silent 
(defhydra yt-hydra/help (:color blue :hint nil)
  "
_f_unction: Documentation for a function
_v_ariable: Documentation for a variable
_i_nfo: info mode 
_G_oogle: search google 
_d_ictionary: search meaning of a word"
  ("f" describe-function)
  ("v" describe-variable)
  ("i" helm-info-org)
  ("G" helm-google-suggest)
  ("d" osx-dictionary-search-word-at-point)
  ("s" get-synonyms)
  ;; ("s" synosaurus-lookup)
  ;; ("d" voca-builder/search-popup)
  )
(global-set-key (kbd "<f1>") 'yt-hydra/help/body)
#+end_src

#+begin_src emacs-lisp :results silent :tangle no
;;; package ---  Query thesaurus.com for synonyms of a given word.

;;; Copyright (C) 2021 by Anselm Coogan
;;; URL: https://github.com/AnselmC/thesaurus
;;; Version: 0.1

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Uses the Elisp request library (https://github.com/tkf/emacs-request) and the thesaurus.com API to fetch synonyms

;;; Code:

(require 'cl-lib)
(require 'request)

(defun parse-synonyms-in-response (payload)
  "Parse JSON PAYLOAD to extract synonyms from response."
  (let* ((data (assoc-default 'data payload))
         (definition-data (if data
                              (assoc-default 'definitionData data)
                            '()))
         (definitions-list (if definition-data
                               (assoc-default 'definitions definition-data)
                             '()))
         (definitions (if definitions-list
                          (aref definitions-list 0)
                        '()))
         (synonyms (if definitions
                       (cl-map 'vector
                               #'(lambda (e) (assoc-default 'term e))
                               (assoc-default 'synonyms definitions))
                     (vector))))
    synonyms))

(defun ask-thesaurus-for-synonyms (word)
  "Ask thesaurus.com for synonyms for WORD and return vector of synonyms (possibly empty)."
  (let* ((thesaurus-base-url "https://tuna.thesaurus.com/pageData/")
         (request-string (concat thesaurus-base-url word))
         (response (request-response-data (request request-string
                                            :parser 'json-read
                                            :sync t))))
    (if response
        (parse-synonyms-in-response response)
      (vector))))

(defun get-synonyms()
  "Interactively get synonyms for symbol at active region or point."
  (interactive)
  (let* ((bounds (if (use-region-p)
                     (cons (region-beginning) (region-end))
                     (bounds-of-thing-at-point 'symbol)))
         (word (buffer-substring-no-properties (car bounds) (cdr bounds)))
         (replace-text (completing-read
                        (format "Select synonym for %S: " word)
                        (append (ask-thesaurus-for-synonyms word) '()))))
    (when bounds
      (delete-region (car bounds) (cdr bounds))
      (insert replace-text))))

(provide 'thesaurus)
;;; thesaurus.el ends here
#+end_src
hydra 
#+begin_src emacs-lisp :results silent 
(use-package hydra)

(defhydra hydra-search (:color blue
                               :hint nil)
  "
Current Buffer   : _i_search helm-_s_woop _a_ce-jump-word 
Multiple Buffers : helm-multi-_S_woop 
Project Directory: projectile-_g_rep  helm-projectile-_G_rep
Python: elpy rgrep _p_ython project
"
  ("i" isearch-forward)
  ("s" helm-swoop)
  ("a" ace-jump-word-mode)
  ("S" helm-multi-swoop)
  ("g" projectile-grep)
  ("G" helm-projectile-grep)
  ("p" elpy-rgrep-symbol)
  )
(global-set-key [f5] 'hydra-search/body)

#+end_src
** org-mode
   [2021-06-07 Mon 12:40]

   use hydra to define a function that use most frequently 
#+begin_src emacs-lisp :results silent 
;; https://github.com/abo-abo/hydra/wiki/Org-clock
(defhydra hydra-org-clock (:color blue :hint nil)
  "
Clock       In/out^     ^Edit^   ^Summary     Doc(_?_)
---------------------------------------------------
            _i_n         _e_dit   
_h_istory   _c_ontinue   _q_uit   _d_isplay
_g_oto      _o_ut        ^ ^      _r_eport
      "
  ("i" org-clock-in)
  ("o" org-clock-out)
  ("c" org-clock-in-last)
  ("e" org-clock-modify-effort-estimate)
  ("q" org-clock-cancel)
  ("g" org-clock-goto)
  ("d" org-clock-display)
  ("r" org-clock-report)
  ;; ("j" org-clock-jump-to-current-clock)
  ("h" yt/org-clock-in-select)
  ("?" (org-info "Clocking commands")))

(global-set-key (kbd "<f11>") 'hydra-org-clock/body)

(defun yt/org-clock-in-select ()
  (interactive)
  (setq current-prefix-arg '(4)) ;; C-u, 
  (call-interactively 'org-clock-in))
#+end_src

* Emacs Lisp Programming                                         :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/emacs_lisp_programming
  :END:
[2015-07-05 Sun 19:46]

* Python 
  :PROPERTIES:
  :header-args: :tangle lisp/dev-python.el
  :END:
[2015-07-05 Sun 19:49]

#+begin_src emacs-lisp :results silent 
(add-hook 'python-mode-hook 'flyspell-prog-mode)
;; (add-hook 'python-mode-hook 'elpy-mode)
(setq python-fill-docstring-style 'django)

;; (use-package elpy
;;   :ensure t
;;   :init)

;; (elpy-enable)
;; ;; (elpy-use-ipython "ipython3")
;; (setq elpy-rpc-python-command "python3")
;; (global-set-key (kbd "M-*") 'pop-tag-mark)
;; ;; (setq elpy-test-discover-runner-command '("python3" "-m" "unittest"))
;; (setq elpy-test-pytest-runner-command '("py.test" "--maxfail=100" "-s"))
;; (setq elpy-rpc-backend "jedi")

;; ;; make elpy more like ESS
;; (define-key elpy-mode-map (kbd "<C-return>") 'elpy-shell-send-statement-and-step)
;; (define-key elpy-mode-map (kbd "<C-c C-f>") 'python-shell-send-defun)
;; (define-key elpy-mode-map (kbd "<C-c C-b>") 'elpy-shell-send-region-or-buffer)

;; ;; for new elpy version
;; (setq elpy-shell-starting-directory 'current-directory)
;; (setq elpy-rpc-virtualenv-path 'current)
#+end_src

Use Jupyter for python interactive shell.

#+begin_src emacs-lisp :results silent
(setq python-shell-interpreter "jupyter"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)
(require 'python)
(add-to-list 'python-shell-completion-native-disabled-interpreters
             "jupyter")
#+end_src

#+begin_src emacs-lisp :results silent :tangle no
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+end_src

TODO: replace this by using native elpy function.

    this allows me to run multiple python process and switch between them.
    #+begin_src emacs-lisp :results silent 
    (setq elpy-dedicated-shells nil)   ; Ensure no conflict with dedicated shells

    (defvar elpy-shell-python-shell-names '("Python")
	  "List of existing python shell names.")

    ;; (define-key elpy-mode-map (kbd "C-c C-s") 'elpy-shell-set-local-shell)
    #+end_src

** lsp for python
   [2020-08-22 Sat 19:03]
    
   replace elpy by LSP mode for python dev..

   #+begin_src emacs-lisp :results silent :eval no
   ;; this requires pip install -U jedi-language-server
   (use-package lsp-mode
     :config
     (add-hook 'python-mode-hook 'lsp))
   ;; (use-package company-lsp)
   (use-package lsp-ui)


   ;; (use-package lsp-jedi
   ;;   :ensure t
   ;;   :config
   ;;   (with-eval-after-load "lsp-mode"
   ;;     (add-to-list 'lsp-disabled-clients 'pyls)
   ;;     (add-to-list 'lsp-enabled-clients 'jedi)))



   (use-package lsp-pyright
		:ensure t
		:hook (python-mode . (lambda ()
				       (require 'lsp-pyright)
				       (lsp))))  ; or lsp-deferred
   #+end_src
** Sphinx-doc for documentation
   [2016-06-03 Fri 15:33]

#+begin_src emacs-lisp :results silent
(use-package sphinx-doc
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'sphinx-doc)
                         (sphinx-doc-mode t))))

(cl-defstruct sphinx-doc-doc
  (summary "FIXME: briefly describe function") ; summary line that fits on the first line
  before-fields                                ; list of comments before fields
  after-fields                                 ; list of comments after fields
  fields)                                      ; list of field objects
#+end_src
** jupyter 
#+begin_src emacs-lisp :results silent
(use-package jupyter)
#+end_src
* Refile                                                         :ExportFile:
  :PROPERTIES:
  :EXPORT_FILE_NAME: ~/git/.emacs.d/docs/refile
  :header-args: :tangle lisp/refile.el
  :END:



quickly filter out non-work tasks in org-agenda. 

#+begin_src emacs-lisp :results silent 
(defun yt/filter-life-agenda (tag)
  (concat "-" "life"))
(defun yt/filter-office-agenda (tag)
  (concat "-" "@office"))
(if (eq system-type 'darwin)
    (setq org-agenda-auto-exclude-function 'yt/filter-office-agenda)
  (setq org-agenda-auto-exclude-function 'yt/filter-life-agenda))
#+end_src


open this gnome-terminal here
#+begin_src emacs-lisp :results silent
(defun yt/open-terminal ()
  (interactive)
  (shell-command (concat "gnome-terminal "
                         "--working-directory="
                         (file-truename default-directory)
                         )))
;; (global-set-key (kbd "<f5>") 'yt/open-terminal)
#+end_src

use swiper to replace default =isearch=

#+begin_src emacs-lisp :results silent 
(use-package swiper)
(global-set-key "\C-s" 'swiper)
#+end_src


use snakemake-mode for smake file.

#+begin_src emacs-lisp :results silent 
(add-to-list 'auto-mode-alist '("sfile" . snakemake-mode))
#+end_src


#+begin_src emacs-lisp :results silent 
(defun yt/sh-chunk-args ()
(interactive)
(replace-string " -" " \\\n -")
)
#+end_src

insert git sha1 value into current point.

#+begin_src emacs-lisp :results silent 
(defun yt/insert-git-hash-value ()
  (interactive)
  (insert (shell-command-to-string (concat "git rev-parse HEAD"))))
(global-set-key (kbd "<f9> s") 'yt/insert-git-hash-value)
#+end_src

#+begin_src emacs-lisp :results silent
(use-package which-key)
(which-key-mode)
#+end_src
** NEXT Treemacs
copied following configuration from
https://github.com/Alexander-Miller/treemacs with no additional
editing.

#+begin_src emacs-lisp :results silent
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src
** nov-mode for reading epub in Emacs
:PROPERTIES:
:CREATED:  [2022-05-04 Wed 11:07]
:END:

https://depp.brause.cc/nov.el/

#+begin_src emacs-lisp :results silent
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                           :height 2.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
;; (setq nov-text-width 80)  ;; or used the following for auto text filling
(setq nov-text-width t)
(setq visual-fill-column-center-text t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
(add-hook 'nov-mode-hook '(lambda () (blink-cursor-mode 0)))
#+end_src
** org-download

#+begin_src emacs-lisp :results silent
(require 'org-download)
(setq-default org-download-image-dir "~/Downloads/org-download")
(setq-default org-download-heading-lvl nil)
#+end_src
** org-roam
:PROPERTIES:
:CREATED:  [2022-12-20 Tue 21:43]
:END:

#+begin_src emacs-lisp :results silent
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/git/org/diary")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%H:%M>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  (org-roam-dailies-directory "daily")

  ;; ; change the timestmap aslightly..
  ;; (org-roam-capture-templates
  ;;  '(("d" "default" plain "%?"
  ;;    :target (file+head "%<%Y%m%d_%H%M%S>-${slug}.org"
  ;;                       "#+title: ${title}\n")
  ;;    :unnarrowed t)))

  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
	 ("C-c n D" . yt/dailies)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

(defun yt/dailies ()
  "global function for creating daries"
  (interactive)
  (let ((org-roam-directory "~/git/org/diary"))
    (org-roam-dailies-capture-today)
    )
  )

#+end_src
** gpg encryption
:PROPERTIES:
:CREATED:  [2022-12-29 Thu 23:58]
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-package epa-file
    :ensure nil 
    :config
    (setq epa-file-encrypt-to '("yi.tang.uni@gmail.com"))
    :custom
    (epa-file-select-keys 1)   ;; seems there's a bug in gpg. it always asks for which key.
    )
#+end_src
* Scripting
  :PROPERTIES:
  :header-args: :tangle lisp/scripting.el
  :END:
  [2021-06-05 Sat 12:00]

** eshell 

    #+begin_src emacs-lisp :results silent 
    (defalias 'open 'find-file)
    
    
    ;; from emacs-reddit
    ;; (defun eshell-here ()
    ;;   "Opens up a new shell in the directory associated with the current buffer's file."
    ;;   (interactive)
    ;;   (let* ((parent (file-name-directory (buffer-file-name)))
    ;;          (name   (car
    ;;                   (last
    ;;                    (split-string parent "/" t)))))
    ;;     (split-window-vertically)
    ;;     (other-window 1)
    ;;     (eshell "new")
    ;;     (rename-buffer (concat "*eshell: " name "*"))
    
    ;;     (insert (concat "ls"))
    ;;     (eshell-send-input)))
    
    (defun eshell-here ()
      "Opens up a new shell in the directory associated with the current buffer's file."
      (interactive)
      (let* ((parent (if (buffer-file-name)
			 (file-name-directory (buffer-file-name))
		       default-directory))
	     (name (car (last (split-string parent "/" t)))))
	(split-window-vertically)
	(other-window 1)
	(eshell "new")
	(rename-buffer (concat "*eshell: " name "*"))
    
	(insert (concat "ls"))
	(eshell-send-input)))
    
    (global-set-key (kbd "C-!") 'eshell-here)
    
    (defun delete-single-window (&optional window)
      "Remove WINDOW from the display.  Default is `selected-window'.
    If WINDOW is the only one in its frame, then `delete-frame' too."
      (interactive)
      (save-current-buffer
	(setq window (or window (selected-window)))
	(select-window window)
	(kill-buffer)
	(if (one-window-p t)
	    (delete-frame)
	  (delete-window (selected-window)))))
    
    (defun eshell/x (&rest args)
      (delete-single-window))
    
    
    
    #+end_src
** Git Sync
:LOGBOOK:  
CLOCK: [2015-01-25 Sun 21:15]--[2015-01-25 Sun 22:25] =>  1:10
:END:      
[2015-01-19 Mon 12:09]
    

Magit provides an interface to Git, and it is really pleasant to use. 
The [[https://magit.vc/manual/magit-refcard.pdf][reference card]] lists useful key-bindings and commands.

#+begin_src emacs-lisp
(use-package magit
  :ensure t)
(setq magit-last-seen-setup-instructions "1.4.0")
(setq magit-auto-revert-mode nil)
(global-set-key (kbd "<f9> g") 'magit-status)
(global-auto-revert-mode t)
#+end_src 
            
# 1. automatically save all the buffers
   
Occasionally my office machine goes down because I run R with big
data, and it consumes all the memory. If that happens, I
potentially lose the newsiest version of scripts, which is bit
annoy. The following snippets will save all buffers in every hours.

#+begin_src emacs-lisp :results silent 
(defun yt/save-all-buffers ()
  "save all files-visiting buffers without user confirmation"
  (interactive)
  (save-some-buffers t nil)
  (message "save all buffers... done"))
(run-at-time "05:59" 3600 'yt/save-all-buffers)
#+end_src

Sometimes I have to leave at the last minutes, then what I do is call
a functions that commits and upload to the repo so that I can
continue work at home.

The =yt/git-up= function will do
   1. pull from the remote repo, and make sure the local repo is always
      up-to-date.
   2. add everything and commit with a timesamp.
   3. push local changes to the remote repo.
      
Here is the snippets.
#+begin_src emacs-lisp :results silent 
(defun yt/git-backup ()
  (let ((git-sh-scripts "
echo Start to Sync: $(date) 

REPOS=\"org\"
for REPO in $REPOS
do
    echo
    echo \"Repository: $REPO\"
    cd ~/git/$REPO
    # update
    git pull 
    # Remove deleted files
    git ls-files --deleted -z | xargs -0 git rm >/dev/null 2>&1
    # Add new files
    git add -A . >/dev/null 2>&1
    git commit -m \"$(date)\"
    git push origin master 
done

echo Finished Sync: $(date)
"))
    (async-shell-command git-sh-scripts))
  (message "all git sync... done"))

(defun yt/git-up ()
  (interactive)
  (yt/save-all-buffers)
  (yt/git-backup))
#+end_src

  
Few times I did some important work over the weenend, but once I
arrived office I realised I forgot uploading, These situations are
quick frustrating. The following snippets will start to uploads once
every three hours on my MacbookPro, but I don't use it anymore, since
I can get most of my work done in the office. 

Note this workflow is suspended for it's unsafe. 
   #+begin_src emacs-lisp
;; (cond ((eq system-type 'darwin)
;;        (run-at-time "05:59" 10800 'yt/git-up)))
#+end_src


